
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  isActive: 'isActive',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CasualScalarFieldEnum = {
  id: 'id',
  name: 'name',
  nationalId: 'nationalId',
  phoneNumber: 'phoneNumber',
  farmName: 'farmName',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DailyCasualRequestScalarFieldEnum = {
  id: 'id',
  casualsRequired: 'casualsRequired',
  crop: 'crop',
  cropStage: 'cropStage',
  date: 'date',
  week: 'week',
  activity: 'activity',
  farmName: 'farmName',
  adjustment: 'adjustment',
  units: 'units',
  costPerUnit: 'costPerUnit',
  total: 'total',
  status: 'status',
  rejectionReason: 'rejectionReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  supervisorId: 'supervisorId',
  adminId: 'adminId'
};

exports.Prisma.CasualWorkEntryScalarFieldEnum = {
  id: 'id',
  activityDone: 'activityDone',
  unit: 'unit',
  costPerUnit: 'costPerUnit',
  date: 'date',
  farmName: 'farmName',
  period: 'period',
  month: 'month',
  crop: 'crop',
  cropStage: 'cropStage',
  adjustment: 'adjustment',
  amount: 'amount',
  amountInclMomoCharges: 'amountInclMomoCharges',
  signature: 'signature',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  casualId: 'casualId',
  supervisorId: 'supervisorId',
  adminId: 'adminId'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  token: 'token',
  userId: 'userId',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  isRead: 'isRead',
  link: 'link',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  FARM_SUPERVISOR: 'FARM_SUPERVISOR',
  SYSTEM_ADMIN: 'SYSTEM_ADMIN'
};

exports.DailyRequestStatus = exports.$Enums.DailyRequestStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  REQUEST_CREATED: 'REQUEST_CREATED',
  REQUEST_APPROVED: 'REQUEST_APPROVED',
  REQUEST_REJECTED: 'REQUEST_REJECTED',
  WORK_ENTRY_CREATED: 'WORK_ENTRY_CREATED',
  SYSTEM_NOTIFICATION: 'SYSTEM_NOTIFICATION'
};

exports.Prisma.ModelName = {
  User: 'User',
  Casual: 'Casual',
  DailyCasualRequest: 'DailyCasualRequest',
  CasualWorkEntry: 'CasualWorkEntry',
  Session: 'Session',
  Notification: 'Notification'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "D:\\my wspace\\work\\GFG\\server\\src\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "D:\\my wspace\\work\\GFG\\server\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.17.1",
  "engineVersion": "272a37d34178c2894197e17273bf937f25acdeac",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../src/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// User model\nmodel User {\n  id        String   @id @default(cuid())\n  email     String   @unique\n  password  String\n  firstName String?\n  lastName  String?\n  isActive  Boolean  @default(true)\n  role      UserRole @default(FARM_SUPERVISOR)\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Relations\n  sessions                    Session[]\n  casualWorkEntries           CasualWorkEntry[]\n  approvedCasualWorkEntries   CasualWorkEntry[]    @relation(\"ApprovedBy\")\n  dailyCasualRequests         DailyCasualRequest[]\n  approvedDailyCasualRequests DailyCasualRequest[] @relation(\"RequestApprovedBy\")\n  notifications               Notification[]\n\n  @@map(\"users\")\n}\n\n// Casual Worker model\nmodel Casual {\n  id          String   @id @default(cuid())\n  name        String\n  nationalId  String   @unique\n  phoneNumber String\n  farmName    String   @default(\"Kamabuye\")\n  isActive    Boolean  @default(true)\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  // Relations\n  workEntries CasualWorkEntry[]\n\n  @@map(\"casuals\")\n}\n\n// Daily Casual Request model (Request for casual workers)\nmodel DailyCasualRequest {\n  id              String             @id @default(cuid())\n  casualsRequired Int // Number of casuals needed\n  crop            String\n  cropStage       String\n  date            DateTime\n  week            String // e.g., \"week 7-13\"\n  activity        String\n  farmName        String\n  adjustment      Float              @default(0)\n  units           Int                @default(1)\n  costPerUnit     Float\n  total           Float // Calculated: casualsRequired * costPerUnit\n  status          DailyRequestStatus @default(PENDING)\n  rejectionReason String?\n  createdAt       DateTime           @default(now())\n  updatedAt       DateTime           @updatedAt\n\n  // Relations\n  supervisorId String\n  supervisor   User    @relation(fields: [supervisorId], references: [id], onDelete: Cascade)\n  adminId      String?\n  admin        User?   @relation(\"RequestApprovedBy\", fields: [adminId], references: [id], onDelete: SetNull)\n\n  @@map(\"daily_casual_requests\")\n}\n\n// Casual Work Entry model (Actual work done by casuals)\nmodel CasualWorkEntry {\n  id                    String   @id @default(cuid())\n  activityDone          String\n  unit                  Int // Number of days/imibyizi\n  costPerUnit           Float\n  date                  DateTime\n  farmName              String\n  period                String // e.g., \"week 31-6\"\n  month                 String\n  crop                  String\n  cropStage             String?\n  adjustment            Float    @default(0) // Cut amount due to charges like food\n  amount                Float // Calculated: (unit * costPerUnit) - adjustment\n  amountInclMomoCharges Float // Calculated: amount + momo charges\n  signature             String? // Digital signature or confirmation\n  createdAt             DateTime @default(now())\n  updatedAt             DateTime @updatedAt\n\n  // Relations\n  casualId     String\n  casual       Casual  @relation(fields: [casualId], references: [id], onDelete: Cascade)\n  supervisorId String\n  supervisor   User    @relation(fields: [supervisorId], references: [id], onDelete: Cascade)\n  adminId      String?\n  admin        User?   @relation(\"ApprovedBy\", fields: [adminId], references: [id], onDelete: SetNull)\n\n  @@map(\"casual_work_entries\")\n}\n\n// Session model for JWT token management\nmodel Session {\n  id        String   @id @default(cuid())\n  token     String   @unique\n  userId    String\n  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  expiresAt DateTime\n  createdAt DateTime @default(now())\n\n  @@map(\"sessions\")\n}\n\n// Notification model\nmodel Notification {\n  id        String           @id @default(cuid())\n  userId    String\n  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)\n  type      NotificationType\n  title     String\n  message   String\n  isRead    Boolean          @default(false)\n  link      String? // Optional link to related resource\n  metadata  String? // JSON string for additional data\n  createdAt DateTime         @default(now())\n\n  @@map(\"notifications\")\n}\n\n// Enums\nenum UserRole {\n  FARM_SUPERVISOR\n  SYSTEM_ADMIN\n}\n\nenum DailyRequestStatus {\n  PENDING\n  APPROVED\n  REJECTED\n}\n\nenum NotificationType {\n  REQUEST_CREATED\n  REQUEST_APPROVED\n  REQUEST_REJECTED\n  WORK_ENTRY_CREATED\n  SYSTEM_NOTIFICATION\n}\n",
  "inlineSchemaHash": "781551f2b68f0bd7e0523cbe290b2be4cb2fc03114590f55d1849ff18be11a5d",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"UserRole\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"sessions\",\"kind\":\"object\",\"type\":\"Session\",\"relationName\":\"SessionToUser\"},{\"name\":\"casualWorkEntries\",\"kind\":\"object\",\"type\":\"CasualWorkEntry\",\"relationName\":\"CasualWorkEntryToUser\"},{\"name\":\"approvedCasualWorkEntries\",\"kind\":\"object\",\"type\":\"CasualWorkEntry\",\"relationName\":\"ApprovedBy\"},{\"name\":\"dailyCasualRequests\",\"kind\":\"object\",\"type\":\"DailyCasualRequest\",\"relationName\":\"DailyCasualRequestToUser\"},{\"name\":\"approvedDailyCasualRequests\",\"kind\":\"object\",\"type\":\"DailyCasualRequest\",\"relationName\":\"RequestApprovedBy\"},{\"name\":\"notifications\",\"kind\":\"object\",\"type\":\"Notification\",\"relationName\":\"NotificationToUser\"}],\"dbName\":\"users\"},\"Casual\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"nationalId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phoneNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"farmName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"workEntries\",\"kind\":\"object\",\"type\":\"CasualWorkEntry\",\"relationName\":\"CasualToCasualWorkEntry\"}],\"dbName\":\"casuals\"},\"DailyCasualRequest\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"casualsRequired\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"crop\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"cropStage\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"week\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"activity\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"farmName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"adjustment\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"units\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"costPerUnit\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"total\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"DailyRequestStatus\"},{\"name\":\"rejectionReason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"supervisorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"supervisor\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"DailyCasualRequestToUser\"},{\"name\":\"adminId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"admin\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"RequestApprovedBy\"}],\"dbName\":\"daily_casual_requests\"},\"CasualWorkEntry\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"activityDone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"unit\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"costPerUnit\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"farmName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"period\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"month\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"crop\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"cropStage\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"adjustment\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"amountInclMomoCharges\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"signature\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"casualId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"casual\",\"kind\":\"object\",\"type\":\"Casual\",\"relationName\":\"CasualToCasualWorkEntry\"},{\"name\":\"supervisorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"supervisor\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CasualWorkEntryToUser\"},{\"name\":\"adminId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"admin\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ApprovedBy\"}],\"dbName\":\"casual_work_entries\"},\"Session\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SessionToUser\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"sessions\"},\"Notification\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"NotificationToUser\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"NotificationType\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"message\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isRead\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"link\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"notifications\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

